// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Daily.Planner.with.God.Persistance.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250403213721_AddTemporalPermissionsData")]
    partial class AddTemporalPermissionsData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgendaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Favorite")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LetterColorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LetterDateColorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OriginalUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PrimaryColorDateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PrimaryColorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Reported")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TitleColorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Versicle")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AgendaId");

                    b.HasIndex("LetterColorId");

                    b.HasIndex("LetterDateColorId");

                    b.HasIndex("OriginalUserId");

                    b.HasIndex("PrimaryColorDateId");

                    b.HasIndex("PrimaryColorId");

                    b.HasIndex("TitleColorId");

                    b.HasIndex("UserId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Ads", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserCreatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Ads");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Agenda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageBackgroundSrc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsMale")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReported")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OriginalAgendaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OriginalAgendaId");

                    b.ToTable("Agendas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9656ec88-b900-4117-984f-74d2868a2a7c"),
                            Content = "Contenido para la agenda",
                            ImageBackgroundSrc = "/assets/backgrounds/R07-2025.png",
                            IsMale = true,
                            IsReported = false,
                            Title = "R07-2025",
                            Year = 2025
                        },
                        new
                        {
                            Id = new Guid("e345b2d8-1c47-405c-b762-7c8dc3d8388a"),
                            Content = "Contenido para la agenda",
                            ImageBackgroundSrc = "/assets/backgrounds/R07-2025.png",
                            IsMale = true,
                            IsReported = true,
                            Title = "R07-2025",
                            Year = 2025
                        });
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.ApplicationConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApplicationConfigs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("026f5f5c-97bc-4bf2-8b72-9d8d0b6b0694"),
                            Name = "HomeVideoUrl",
                            Value = "https://www.youtube.com/watch?v=Q9QoXR_5Qzs&list=PLt7-BTVbUMJne1HPcFvTt-Z8XxUSQCp0o"
                        });
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.ColorPalett", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("ColorPaletts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f25df6d-44f0-4985-8e56-9d193d9f4570"),
                            Color = "#114D7A",
                            TypeId = new Guid("84d0826e-ce9c-4a52-b27e-e7740e8f98e7")
                        },
                        new
                        {
                            Id = new Guid("b06ddf08-6d80-433d-9599-97ed6ab805d4"),
                            Color = "#EAE9E6",
                            TypeId = new Guid("db0d60a6-e693-44eb-ae68-cc31719599ae")
                        },
                        new
                        {
                            Id = new Guid("498ca682-19b8-40bb-9c5a-2e5e99f0796e"),
                            Color = "#A0D3FA",
                            TypeId = new Guid("7e3db5bd-c255-4795-8d3b-3f038f09a9ba")
                        },
                        new
                        {
                            Id = new Guid("6626c294-ee9f-4105-b858-68e4a6ba3036"),
                            Color = "#FAE1A0",
                            TypeId = new Guid("9659ad69-c5d3-4939-8702-af2064d6f1fd")
                        },
                        new
                        {
                            Id = new Guid("836d62f8-dea8-4bdc-856f-613de2dd79eb"),
                            Color = "#7A3F11",
                            TypeId = new Guid("457978c7-36f9-4ce0-b511-c5146c80c22e")
                        });
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Configuration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ShowFavorites")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowPetitions")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Configurations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("788a03cd-2864-44b2-883a-4d137f737ada"),
                            Name = "",
                            ShowFavorites = false,
                            ShowPetitions = false
                        },
                        new
                        {
                            Id = new Guid("dde063f6-79da-4707-852c-62260ffb82af"),
                            Name = "",
                            ShowFavorites = false,
                            ShowPetitions = true
                        },
                        new
                        {
                            Id = new Guid("24d897b2-e36c-4e3e-a60e-5075535f7352"),
                            Name = "",
                            ShowFavorites = true,
                            ShowPetitions = false
                        },
                        new
                        {
                            Id = new Guid("ed187966-ffc8-4897-becc-619cfe584445"),
                            Name = "",
                            ShowFavorites = true,
                            ShowPetitions = true
                        });
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgendaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AgendaId");

                    b.HasIndex("UserId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("05958f1c-844a-43e9-9bcb-6667dad75670"),
                            Description = "Puede ver la vista de Administracion de usuarios",
                            SystemName = "CSUV"
                        },
                        new
                        {
                            Id = new Guid("0678fae5-e577-4fd5-a759-ae3fb0fd9d6b"),
                            Description = "Puede ver las agendas",
                            SystemName = "CSAG"
                        },
                        new
                        {
                            Id = new Guid("0a1f874b-af1c-4b3f-8d3e-2714eb2a6ca4"),
                            Description = "Puede crear tarjetas",
                            SystemName = "CCCD"
                        },
                        new
                        {
                            Id = new Guid("0aaa962a-8d64-4515-9659-63e37f98c8ca"),
                            Description = "Puede actualizar las configuraciones del sistema",
                            SystemName = "CUAP"
                        },
                        new
                        {
                            Id = new Guid("0fe9b79f-8bf5-4742-8284-5414494988b0"),
                            Description = "Puede actualizar sus anuncios",
                            SystemName = "CUNW"
                        },
                        new
                        {
                            Id = new Guid("161ab07a-92d0-422e-a7df-20e69238dad7"),
                            Description = "Puede actualizar usuarios",
                            SystemName = "CUUS"
                        },
                        new
                        {
                            Id = new Guid("19f3b0e7-cc0b-44ba-ad7f-3ad17bcc9949"),
                            Description = "Puede ver la vista del R07",
                            SystemName = "CSPV"
                        },
                        new
                        {
                            Id = new Guid("1f52010f-c57c-4031-a666-4ad9c4076404"),
                            Description = "Puede actualizar peticiones",
                            SystemName = "CUPT"
                        },
                        new
                        {
                            Id = new Guid("24395707-0c33-42fe-bc05-39bd9b5e0485"),
                            Description = "Puede crear anuncios",
                            SystemName = "CCNW"
                        },
                        new
                        {
                            Id = new Guid("2ad66724-24d7-4a86-b512-7cf5a4c4bfc3"),
                            Description = "Puede asignar permisos temporales",
                            SystemName = "CCTP"
                        },
                        new
                        {
                            Id = new Guid("2dd17f8f-6e80-4e60-919d-e304b90d0f46"),
                            Description = "Puede actualizar las configuraciones",
                            SystemName = "CUCN"
                        },
                        new
                        {
                            Id = new Guid("2f6a2460-7e0c-4677-a9a7-0c90ac88e2c7"),
                            Description = "Puede eliminar peticiones",
                            SystemName = "CDPT"
                        },
                        new
                        {
                            Id = new Guid("348f5ae9-8ee7-40e1-bd13-0166e437ed1b"),
                            Description = "Puede eliminar colores",
                            SystemName = "CDCO"
                        },
                        new
                        {
                            Id = new Guid("3bd9aa44-f431-43a6-8b0a-ca99b77d100c"),
                            Description = "Puede eliminar tarjetas",
                            SystemName = "CDCD"
                        },
                        new
                        {
                            Id = new Guid("3fb76b0e-bcf6-45a0-a141-42873cff242c"),
                            Description = "Puede ver las configuraciones del sistema",
                            SystemName = "CSAP"
                        },
                        new
                        {
                            Id = new Guid("410edf32-53fb-4242-9ca1-009ae499fcca"),
                            Description = "Puede ver la vista de Solicitudes",
                            SystemName = "CSEV"
                        },
                        new
                        {
                            Id = new Guid("489facd4-0546-4e91-9d2d-26afc5e60080"),
                            Description = "Puede ver la vista del Dashboard",
                            SystemName = "CSDV"
                        },
                        new
                        {
                            Id = new Guid("4f7c081e-b834-4fed-acfb-10d54e8c8f11"),
                            Description = "Puede reportar tarjetas",
                            SystemName = "CRCD"
                        },
                        new
                        {
                            Id = new Guid("503fc79e-3f52-435b-9222-254c8c1fc738"),
                            Description = "Puede ver la vista de Manejo de la aplicacion",
                            SystemName = "CSHV"
                        },
                        new
                        {
                            Id = new Guid("54b2a2a2-eccb-4241-8ece-d4e5a9beebaa"),
                            Description = "Puede actualizar colores",
                            SystemName = "CUCO"
                        },
                        new
                        {
                            Id = new Guid("54e3c968-e8d4-4b43-87d6-6351076e0093"),
                            Description = "Puede eliminar usuarios",
                            SystemName = "CDUS"
                        },
                        new
                        {
                            Id = new Guid("588ec542-ed55-4e66-9215-1c9216c5c914"),
                            Description = "Puede descargar el reporte del mes",
                            SystemName = "CDWCD"
                        },
                        new
                        {
                            Id = new Guid("5bada406-7bf0-41e7-8f6c-52f65760181c"),
                            Description = "Puede ver la vista del Inicio",
                            SystemName = "CSHV"
                        },
                        new
                        {
                            Id = new Guid("6a088364-cfa7-4e7c-8a31-17cddc9f1370"),
                            Description = "Puede ver los anuncios",
                            SystemName = "CSNW"
                        },
                        new
                        {
                            Id = new Guid("717a6cae-0844-4666-9621-c7082a8b9539"),
                            Description = "Puede ver las configuraciones",
                            SystemName = "CSCN"
                        },
                        new
                        {
                            Id = new Guid("72d1cb2c-30b0-4b6c-a9cd-d471940f7b93"),
                            Description = "Puede ver los colores",
                            SystemName = "CSCO"
                        },
                        new
                        {
                            Id = new Guid("75cf41d2-ca8f-4cb0-a37c-e3b34ddcb8c9"),
                            Description = "Puede crear usuarios",
                            SystemName = "CCUS"
                        },
                        new
                        {
                            Id = new Guid("7816c0b8-4db8-4a8b-b171-824a179709d2"),
                            Description = "Puede ver las tarjetas del R07",
                            SystemName = "CSCD"
                        },
                        new
                        {
                            Id = new Guid("8682fd93-c365-48f6-a363-720fd272a589"),
                            Description = "Puede ver los permisos temporales",
                            SystemName = "CSTP"
                        },
                        new
                        {
                            Id = new Guid("8cbaaf22-3f25-4e50-b4b9-cc5f4a78ba6c"),
                            Description = "Puede crear agendas",
                            SystemName = "CCAG"
                        },
                        new
                        {
                            Id = new Guid("9054c555-4a30-495b-95d4-fff561ce11c6"),
                            Description = "Puede crear notas",
                            SystemName = "CCNT"
                        },
                        new
                        {
                            Id = new Guid("90d0aaaf-793c-4cde-89ea-706cdd0c1a6d"),
                            Description = "Puede actualizar notas",
                            SystemName = "CUNT"
                        },
                        new
                        {
                            Id = new Guid("929d0a6d-6b2d-4391-aa79-c4859b9cfa57"),
                            Description = "Puede eliminar agendas",
                            SystemName = "CDAG"
                        },
                        new
                        {
                            Id = new Guid("a4f2229d-cd70-4c4f-a0fa-39e2f9e4a639"),
                            Description = "Puede ver los usuarios",
                            SystemName = "CSUS"
                        },
                        new
                        {
                            Id = new Guid("b3deaccb-bd01-4cd6-a543-9a001a93101c"),
                            Description = "Puede ver las peticiones",
                            SystemName = "CSPT"
                        },
                        new
                        {
                            Id = new Guid("ba75c802-413c-4209-abb5-d92fe883061c"),
                            Description = "Puede desasignar permisos temporales",
                            SystemName = "CDTP"
                        },
                        new
                        {
                            Id = new Guid("bbb2b3dc-b3a5-4ce4-811c-7750cba00c59"),
                            Description = "Puede eliminar notas",
                            SystemName = "CDNT"
                        },
                        new
                        {
                            Id = new Guid("c7f65971-5dcf-45e8-b146-3df6a710df2c"),
                            Description = "Puede eliminar sus anuncios",
                            SystemName = "CDNW"
                        },
                        new
                        {
                            Id = new Guid("cbd3a20b-a12a-437d-b130-ef77cb174edf"),
                            Description = "Puede ver la vista de las Configuraciones",
                            SystemName = "CSCV"
                        },
                        new
                        {
                            Id = new Guid("cc7d6a95-da2c-4eca-b0fd-7e711600027e"),
                            Description = "Puede ver la vista del Perfil",
                            SystemName = "CSPRV"
                        },
                        new
                        {
                            Id = new Guid("d274575a-c4f2-4d0a-ab6a-c634fabf9c15"),
                            Description = "Puede actualizar agendas",
                            SystemName = "CUAG"
                        },
                        new
                        {
                            Id = new Guid("dc508983-5917-4752-8ccc-1c6674234417"),
                            Description = "Puede crear colores",
                            SystemName = "CCCO"
                        },
                        new
                        {
                            Id = new Guid("e7c19a6f-64d5-47a7-bb93-00aa103a884a"),
                            Description = "Puede ver sus notas",
                            SystemName = "CSNT"
                        },
                        new
                        {
                            Id = new Guid("ee46d590-2457-4b01-95f1-3af291450552"),
                            Description = "Puede crear peticiones",
                            SystemName = "CCPT"
                        },
                        new
                        {
                            Id = new Guid("f6042a14-5907-4a6e-9417-0519cc422160"),
                            Description = "Puede actualizar tarjetas",
                            SystemName = "CUCD"
                        },
                        new
                        {
                            Id = new Guid("ffe00ecd-e320-4a9d-84d7-2d3b2d16aa7b"),
                            Description = "Puede ver la vista de Peticiones",
                            SystemName = "CSPTV"
                        });
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Petition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPraying")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PetitionTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("PrayFor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReportedToUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PetitionTypeId");

                    b.HasIndex("ReportedToUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Petitions");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.PetitionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PetitionTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f345ba02-73c0-42f4-8093-047a1cd0fe5f"),
                            Color = "#FFFFFF",
                            Icon = "mdi-comment-question-outline",
                            Name = "Otro"
                        });
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Scale")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a"),
                            Name = "Admin",
                            Scale = 100
                        },
                        new
                        {
                            Id = new Guid("448f0302-927a-4a9e-b8f7-2ea10cd434e4"),
                            Name = "Moderador",
                            Scale = 10
                        },
                        new
                        {
                            Id = new Guid("b671e630-e8fc-48b0-bb22-6c5b608173f9"),
                            Name = "Pastor",
                            Scale = 6
                        },
                        new
                        {
                            Id = new Guid("fdd6e043-eba2-4087-9b70-a1afdf654060"),
                            Name = "Cabeza de red",
                            Scale = 5
                        },
                        new
                        {
                            Id = new Guid("e48ca8b7-c812-4a6c-8bc1-0d0ddbe21e32"),
                            Name = "Lider de red",
                            Scale = 4
                        },
                        new
                        {
                            Id = new Guid("0edea2e2-b3e0-4445-b7b1-856b098250fe"),
                            Name = "Coordinador de red",
                            Scale = 3
                        },
                        new
                        {
                            Id = new Guid("e52ada33-3ac0-445a-a307-7df21bcfb719"),
                            Name = "Lider",
                            Scale = 2
                        },
                        new
                        {
                            Id = new Guid("0cc14aac-9f7c-4f37-a7d2-01226d41b2d2"),
                            Name = "Oveja",
                            Scale = 1
                        });
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.TemporalPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("TemporalPermissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0577b25b-00d8-41d8-8166-f9561bc8c013"),
                            PermissionId = new Guid("cc7d6a95-da2c-4eca-b0fd-7e711600027e"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("0617f000-969c-490a-8a07-41b56172404d"),
                            PermissionId = new Guid("7816c0b8-4db8-4a8b-b171-824a179709d2"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("08712e8d-3df2-4dd0-a91a-8331df2aa13a"),
                            PermissionId = new Guid("e7c19a6f-64d5-47a7-bb93-00aa103a884a"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("09146e3a-c35f-4756-89fb-bb61e5aa0ef1"),
                            PermissionId = new Guid("ffe00ecd-e320-4a9d-84d7-2d3b2d16aa7b"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("0a918af0-de6e-4571-9d10-2b9e400731c3"),
                            PermissionId = new Guid("f6042a14-5907-4a6e-9417-0519cc422160"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("14f7831d-6d13-40a3-bedd-ca797cc72ed8"),
                            PermissionId = new Guid("ba75c802-413c-4209-abb5-d92fe883061c"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("1714b098-4d82-40b7-b7f8-a05a3b1ea5f4"),
                            PermissionId = new Guid("dc508983-5917-4752-8ccc-1c6674234417"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("19a5e887-6a1c-4e55-8db3-44b1bad09ece"),
                            PermissionId = new Guid("717a6cae-0844-4666-9621-c7082a8b9539"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("19f52fb7-f8df-4511-aa3c-47f1ec0b0b37"),
                            PermissionId = new Guid("8682fd93-c365-48f6-a363-720fd272a589"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("1d9a1b5b-7a4b-4058-8562-ac2aa0d36c3d"),
                            PermissionId = new Guid("d274575a-c4f2-4d0a-ab6a-c634fabf9c15"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("233ebd97-5c9f-47d5-96cd-4526164769c0"),
                            PermissionId = new Guid("161ab07a-92d0-422e-a7df-20e69238dad7"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("288bd58c-f8c3-458c-83b1-a73a81ef86cb"),
                            PermissionId = new Guid("24395707-0c33-42fe-bc05-39bd9b5e0485"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("2e231060-7f8a-4019-a266-87dc2beb3467"),
                            PermissionId = new Guid("929d0a6d-6b2d-4391-aa79-c4859b9cfa57"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("30dfc7f2-1db9-4642-bcdd-675016360c43"),
                            PermissionId = new Guid("bbb2b3dc-b3a5-4ce4-811c-7750cba00c59"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("320a73ad-f473-468f-afd7-d76d664b96a1"),
                            PermissionId = new Guid("0fe9b79f-8bf5-4742-8284-5414494988b0"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("38594a70-4af7-4c54-840e-fe424706711a"),
                            PermissionId = new Guid("2dd17f8f-6e80-4e60-919d-e304b90d0f46"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("39496f49-6060-424e-8d65-65e4b026a64d"),
                            PermissionId = new Guid("588ec542-ed55-4e66-9215-1c9216c5c914"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("5661b5c1-642a-4119-8f65-7554ee45d7e0"),
                            PermissionId = new Guid("3bd9aa44-f431-43a6-8b0a-ca99b77d100c"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("59a69444-5471-4992-9e7b-0bad2ec6d61a"),
                            PermissionId = new Guid("54b2a2a2-eccb-4241-8ece-d4e5a9beebaa"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("63d9665b-0ce0-42e5-87be-9980952b5169"),
                            PermissionId = new Guid("b3deaccb-bd01-4cd6-a543-9a001a93101c"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("67127b93-5e66-4da4-a23d-56b0f9939a5c"),
                            PermissionId = new Guid("2ad66724-24d7-4a86-b512-7cf5a4c4bfc3"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("7414d9f5-bd59-4d7c-846c-0e716bc7b569"),
                            PermissionId = new Guid("0678fae5-e577-4fd5-a759-ae3fb0fd9d6b"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("7f3d63ad-6b05-408c-bced-a2fd9e00f660"),
                            PermissionId = new Guid("75cf41d2-ca8f-4cb0-a37c-e3b34ddcb8c9"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("863cdc15-04ae-413d-b164-3bc76e52e429"),
                            PermissionId = new Guid("05958f1c-844a-43e9-9bcb-6667dad75670"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("8d61443f-5684-49ca-9dc8-687a403fedfe"),
                            PermissionId = new Guid("9054c555-4a30-495b-95d4-fff561ce11c6"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("90e45009-9f72-4246-a736-5d7685726197"),
                            PermissionId = new Guid("cbd3a20b-a12a-437d-b130-ef77cb174edf"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("998d41a1-4cef-4d68-b905-6a9ab14860c3"),
                            PermissionId = new Guid("8cbaaf22-3f25-4e50-b4b9-cc5f4a78ba6c"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("9b473cda-5787-48e1-870a-539a83b61029"),
                            PermissionId = new Guid("2f6a2460-7e0c-4677-a9a7-0c90ac88e2c7"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("a6f36ab9-4d51-48c1-9c14-109608a6a221"),
                            PermissionId = new Guid("503fc79e-3f52-435b-9222-254c8c1fc738"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("a71c917c-d48c-4236-a816-83350a9c25ee"),
                            PermissionId = new Guid("5bada406-7bf0-41e7-8f6c-52f65760181c"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("aa55ac93-e119-4aaa-b1f7-ed8af687825c"),
                            PermissionId = new Guid("c7f65971-5dcf-45e8-b146-3df6a710df2c"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("aa830101-9350-4adf-8e06-7ba1c9c63588"),
                            PermissionId = new Guid("410edf32-53fb-4242-9ca1-009ae499fcca"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("afdc6758-94fb-4312-8012-5bb5a0fe17bf"),
                            PermissionId = new Guid("0aaa962a-8d64-4515-9659-63e37f98c8ca"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("c222f126-ab7e-4bcd-a379-86ca562bd505"),
                            PermissionId = new Guid("1f52010f-c57c-4031-a666-4ad9c4076404"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("c35c989d-fba8-4a49-a570-369c2e7690b4"),
                            PermissionId = new Guid("4f7c081e-b834-4fed-acfb-10d54e8c8f11"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("c588cfb0-8fcb-4808-a310-3d56a8f226a8"),
                            PermissionId = new Guid("ee46d590-2457-4b01-95f1-3af291450552"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("d4e16d02-e46d-432a-b7fd-852703bc2b99"),
                            PermissionId = new Guid("54e3c968-e8d4-4b43-87d6-6351076e0093"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("db07e1eb-b6e2-4be8-8982-7b92857bb4e9"),
                            PermissionId = new Guid("348f5ae9-8ee7-40e1-bd13-0166e437ed1b"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("dc86b276-a3e3-4db7-b41c-f91479691cbc"),
                            PermissionId = new Guid("3fb76b0e-bcf6-45a0-a141-42873cff242c"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("dfc3a9ac-79e9-47c1-bb64-93a5b38efa39"),
                            PermissionId = new Guid("6a088364-cfa7-4e7c-8a31-17cddc9f1370"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("e2bfaaad-62c7-4a93-a801-d1d619872f91"),
                            PermissionId = new Guid("90d0aaaf-793c-4cde-89ea-706cdd0c1a6d"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("e4afa176-d44e-4b9d-8af6-77fa958814e7"),
                            PermissionId = new Guid("0a1f874b-af1c-4b3f-8d3e-2714eb2a6ca4"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("ebf94ba8-1187-4034-b1d8-deb0eb1b20e8"),
                            PermissionId = new Guid("72d1cb2c-30b0-4b6c-a9cd-d471940f7b93"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("f31c456f-868c-464f-aabc-92c07da30dad"),
                            PermissionId = new Guid("489facd4-0546-4e91-9d2d-26afc5e60080"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("fcb5d0c4-4bc9-4a92-8f40-b0a767922b71"),
                            PermissionId = new Guid("19f3b0e7-cc0b-44ba-ad7f-3ad17bcc9949"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        },
                        new
                        {
                            Id = new Guid("fdbef808-0497-4340-b11c-e5847b48fad3"),
                            PermissionId = new Guid("a4f2229d-cd70-4c4f-a0fa-39e2f9e4a639"),
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a")
                        });
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Type", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Types");

                    b.HasData(
                        new
                        {
                            Id = new Guid("84d0826e-ce9c-4a52-b27e-e7740e8f98e7"),
                            Name = "Primary Background"
                        },
                        new
                        {
                            Id = new Guid("db0d60a6-e693-44eb-ae68-cc31719599ae"),
                            Name = "Primary Letter"
                        },
                        new
                        {
                            Id = new Guid("7e3db5bd-c255-4795-8d3b-3f038f09a9ba"),
                            Name = "Title"
                        },
                        new
                        {
                            Id = new Guid("9659ad69-c5d3-4939-8702-af2064d6f1fd"),
                            Name = "Title Date"
                        },
                        new
                        {
                            Id = new Guid("457978c7-36f9-4ce0-b511-c5146c80c22e"),
                            Name = "Title Date Background"
                        });
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsMale")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("LeadId")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.HasIndex("LeadId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("672a5cb2-73fb-4f4c-8764-a6c104a3062d"),
                            ConfigurationId = new Guid("ed187966-ffc8-4897-becc-619cfe584445"),
                            Email = "SuperAdmin@dev.com",
                            FirstName = "Super",
                            IsMale = true,
                            LastName = "Admin",
                            Password = "dCrinPZBjSOiUEfsVO0nGg==",
                            RoleId = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a"),
                            Username = "SuperAdminDev"
                        });
                });

            modelBuilder.Entity("Card", b =>
                {
                    b.HasOne("Daily.Planner.with.God.Domain.Entities.Agenda", "Agenda")
                        .WithMany("Cards")
                        .HasForeignKey("AgendaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.ColorPalett", "LetterColor")
                        .WithMany("CardsLetter")
                        .HasForeignKey("LetterColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.ColorPalett", "LetterDateColor")
                        .WithMany("CardsLetterDate")
                        .HasForeignKey("LetterDateColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.User", "OriginalUser")
                        .WithMany()
                        .HasForeignKey("OriginalUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.ColorPalett", "PrimaryColorDate")
                        .WithMany("CardsPrimaryDate")
                        .HasForeignKey("PrimaryColorDateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.ColorPalett", "PrimaryColor")
                        .WithMany("CardsPrimary")
                        .HasForeignKey("PrimaryColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.ColorPalett", "TitleColor")
                        .WithMany("CardsTitle")
                        .HasForeignKey("TitleColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.User", "User")
                        .WithMany("Cards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agenda");

                    b.Navigation("LetterColor");

                    b.Navigation("LetterDateColor");

                    b.Navigation("OriginalUser");

                    b.Navigation("PrimaryColor");

                    b.Navigation("PrimaryColorDate");

                    b.Navigation("TitleColor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Ads", b =>
                {
                    b.HasOne("Daily.Planner.with.God.Domain.Entities.User", "UserCreated")
                        .WithMany("Ads")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Agenda", b =>
                {
                    b.HasOne("Daily.Planner.with.God.Domain.Entities.Agenda", "OriginalAgenda")
                        .WithMany()
                        .HasForeignKey("OriginalAgendaId");

                    b.Navigation("OriginalAgenda");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.ColorPalett", b =>
                {
                    b.HasOne("Daily.Planner.with.God.Domain.Entities.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Note", b =>
                {
                    b.HasOne("Daily.Planner.with.God.Domain.Entities.Agenda", "Agenda")
                        .WithMany("Notes")
                        .HasForeignKey("AgendaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.User", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agenda");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Petition", b =>
                {
                    b.HasOne("Daily.Planner.with.God.Domain.Entities.PetitionType", "PetitionType")
                        .WithMany()
                        .HasForeignKey("PetitionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.User", "ReportedToUser")
                        .WithMany()
                        .HasForeignKey("ReportedToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PetitionType");

                    b.Navigation("ReportedToUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.TemporalPermission", b =>
                {
                    b.HasOne("Daily.Planner.with.God.Domain.Entities.Permission", "Permission")
                        .WithMany("TemporalPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.Role", "Role")
                        .WithMany("TemporalPermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.User", b =>
                {
                    b.HasOne("Daily.Planner.with.God.Domain.Entities.Configuration", "Configuration")
                        .WithMany()
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.User", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId");

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Configuration");

                    b.Navigation("Lead");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Agenda", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.ColorPalett", b =>
                {
                    b.Navigation("CardsLetter");

                    b.Navigation("CardsLetterDate");

                    b.Navigation("CardsPrimary");

                    b.Navigation("CardsPrimaryDate");

                    b.Navigation("CardsTitle");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Permission", b =>
                {
                    b.Navigation("TemporalPermissions");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Role", b =>
                {
                    b.Navigation("TemporalPermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.User", b =>
                {
                    b.Navigation("Ads");

                    b.Navigation("Cards");

                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
