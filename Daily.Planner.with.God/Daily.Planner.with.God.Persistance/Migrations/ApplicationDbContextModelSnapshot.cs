// <auto-generated />
using System;
using Daily.Planner.with.God.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Daily.Planner.with.God.Persistance.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Ads", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ads");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Agenda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageBackgroundSrc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsReported")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Agendas");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgendaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Favorite")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LetterColorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LetterDateColorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OriginalUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PrimaryColorDateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PrimaryColorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TitleColorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uuid");

                    b.Property<string>("Versicle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AgendaId");

                    b.HasIndex("LetterColorId");

                    b.HasIndex("LetterDateColorId");

                    b.HasIndex("OriginalUserId");

                    b.HasIndex("PrimaryColorDateId");

                    b.HasIndex("PrimaryColorId");

                    b.HasIndex("TitleColorId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.ColorPalett", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("ColorPaletts");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Configuration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ColorPalettId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ColorPalettId1")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ColorPalettId2")
                        .HasColumnType("uuid");

                    b.Property<bool>("ShowFavorites")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowPetitions")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ColorPalettId");

                    b.HasIndex("ColorPalettId1");

                    b.HasIndex("ColorPalettId2");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RolId")
                        .HasColumnType("uuid");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Rol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Scale")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Type", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("LeadId")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.HasIndex("LeadId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Card", b =>
                {
                    b.HasOne("Daily.Planner.with.God.Domain.Entities.Agenda", "Agenda")
                        .WithMany("Cards")
                        .HasForeignKey("AgendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.ColorPalett", "LetterColor")
                        .WithMany("CardsLetter")
                        .HasForeignKey("LetterColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.ColorPalett", "LetterDateColor")
                        .WithMany("CardsLetterDate")
                        .HasForeignKey("LetterDateColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.User", "OriginalUser")
                        .WithMany()
                        .HasForeignKey("OriginalUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.ColorPalett", "PrimaryColorDate")
                        .WithMany("CardsPrimaryDate")
                        .HasForeignKey("PrimaryColorDateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.ColorPalett", "PrimaryColor")
                        .WithMany("CardsPrimary")
                        .HasForeignKey("PrimaryColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.ColorPalett", "TitleColor")
                        .WithMany("CardsTitle")
                        .HasForeignKey("TitleColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.User", null)
                        .WithMany("Cards")
                        .HasForeignKey("UserId1");

                    b.Navigation("Agenda");

                    b.Navigation("LetterColor");

                    b.Navigation("LetterDateColor");

                    b.Navigation("OriginalUser");

                    b.Navigation("PrimaryColor");

                    b.Navigation("PrimaryColorDate");

                    b.Navigation("TitleColor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.ColorPalett", b =>
                {
                    b.HasOne("Daily.Planner.with.God.Domain.Entities.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Configuration", b =>
                {
                    b.HasOne("Daily.Planner.with.God.Domain.Entities.ColorPalett", null)
                        .WithMany("ConfigurationsBackGroundColor")
                        .HasForeignKey("ColorPalettId");

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.ColorPalett", null)
                        .WithMany("ConfigurationsLetterColor")
                        .HasForeignKey("ColorPalettId1");

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.ColorPalett", null)
                        .WithMany("ConfigurationsPrimaryColor")
                        .HasForeignKey("ColorPalettId2");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Permission", b =>
                {
                    b.HasOne("Daily.Planner.with.God.Domain.Entities.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.User", b =>
                {
                    b.HasOne("Daily.Planner.with.God.Domain.Entities.Configuration", "Configuration")
                        .WithMany()
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.User", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.Rol", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");

                    b.Navigation("Lead");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Agenda", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.ColorPalett", b =>
                {
                    b.Navigation("CardsLetter");

                    b.Navigation("CardsLetterDate");

                    b.Navigation("CardsPrimary");

                    b.Navigation("CardsPrimaryDate");

                    b.Navigation("CardsTitle");

                    b.Navigation("ConfigurationsBackGroundColor");

                    b.Navigation("ConfigurationsLetterColor");

                    b.Navigation("ConfigurationsPrimaryColor");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Rol", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.User", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
