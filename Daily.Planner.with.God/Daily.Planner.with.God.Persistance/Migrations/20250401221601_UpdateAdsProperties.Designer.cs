// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Daily.Planner.with.God.Persistance.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250401221601_UpdateAdsProperties")]
    partial class UpdateAdsProperties
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgendaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Favorite")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LetterColorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LetterDateColorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OriginalUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PrimaryColorDateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PrimaryColorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Reported")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TitleColorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Versicle")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AgendaId");

                    b.HasIndex("LetterColorId");

                    b.HasIndex("LetterDateColorId");

                    b.HasIndex("OriginalUserId");

                    b.HasIndex("PrimaryColorDateId");

                    b.HasIndex("PrimaryColorId");

                    b.HasIndex("TitleColorId");

                    b.HasIndex("UserId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Ads", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserCreatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Ads");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Agenda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageBackgroundSrc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsMale")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReported")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OriginalAgendaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OriginalAgendaId");

                    b.ToTable("Agendas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9656ec88-b900-4117-984f-74d2868a2a7c"),
                            Content = "Contenido para la agenda",
                            ImageBackgroundSrc = "/assets/backgrounds/R07-2025.png",
                            IsMale = true,
                            IsReported = false,
                            Title = "R07-2025",
                            Year = 2025
                        },
                        new
                        {
                            Id = new Guid("e345b2d8-1c47-405c-b762-7c8dc3d8388a"),
                            Content = "Contenido para la agenda",
                            ImageBackgroundSrc = "/assets/backgrounds/R07-2025.png",
                            IsMale = true,
                            IsReported = true,
                            Title = "R07-2025",
                            Year = 2025
                        });
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.ColorPalett", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("ColorPaletts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f25df6d-44f0-4985-8e56-9d193d9f4570"),
                            Color = "#114D7A",
                            TypeId = new Guid("84d0826e-ce9c-4a52-b27e-e7740e8f98e7")
                        },
                        new
                        {
                            Id = new Guid("b06ddf08-6d80-433d-9599-97ed6ab805d4"),
                            Color = "#EAE9E6",
                            TypeId = new Guid("db0d60a6-e693-44eb-ae68-cc31719599ae")
                        },
                        new
                        {
                            Id = new Guid("498ca682-19b8-40bb-9c5a-2e5e99f0796e"),
                            Color = "#A0D3FA",
                            TypeId = new Guid("7e3db5bd-c255-4795-8d3b-3f038f09a9ba")
                        },
                        new
                        {
                            Id = new Guid("6626c294-ee9f-4105-b858-68e4a6ba3036"),
                            Color = "#FAE1A0",
                            TypeId = new Guid("9659ad69-c5d3-4939-8702-af2064d6f1fd")
                        },
                        new
                        {
                            Id = new Guid("836d62f8-dea8-4bdc-856f-613de2dd79eb"),
                            Color = "#7A3F11",
                            TypeId = new Guid("457978c7-36f9-4ce0-b511-c5146c80c22e")
                        });
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Configuration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ShowFavorites")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowPetitions")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Configurations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("788a03cd-2864-44b2-883a-4d137f737ada"),
                            Name = "",
                            ShowFavorites = false,
                            ShowPetitions = false
                        });
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Petition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPraying")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PetitionTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("PrayFor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReportedToUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PetitionTypeId");

                    b.HasIndex("ReportedToUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Petitions");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.PetitionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PetitionTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f345ba02-73c0-42f4-8093-047a1cd0fe5f"),
                            Color = "#FFFFFF",
                            Icon = "mdi-comment-question-outline",
                            Name = "Otro"
                        });
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Scale")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("26c52004-d441-48d8-8e00-e2cea7e1d55a"),
                            Name = "Admin",
                            Scale = 100
                        },
                        new
                        {
                            Id = new Guid("448f0302-927a-4a9e-b8f7-2ea10cd434e4"),
                            Name = "Moderador",
                            Scale = 10
                        },
                        new
                        {
                            Id = new Guid("b671e630-e8fc-48b0-bb22-6c5b608173f9"),
                            Name = "Pastor",
                            Scale = 6
                        },
                        new
                        {
                            Id = new Guid("fdd6e043-eba2-4087-9b70-a1afdf654060"),
                            Name = "Cabeza de red",
                            Scale = 5
                        },
                        new
                        {
                            Id = new Guid("e48ca8b7-c812-4a6c-8bc1-0d0ddbe21e32"),
                            Name = "Lider de red",
                            Scale = 4
                        },
                        new
                        {
                            Id = new Guid("0edea2e2-b3e0-4445-b7b1-856b098250fe"),
                            Name = "Coordinador de red",
                            Scale = 3
                        },
                        new
                        {
                            Id = new Guid("e52ada33-3ac0-445a-a307-7df21bcfb719"),
                            Name = "Lider",
                            Scale = 2
                        },
                        new
                        {
                            Id = new Guid("0cc14aac-9f7c-4f37-a7d2-01226d41b2d2"),
                            Name = "Oveja",
                            Scale = 1
                        });
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Type", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Types");

                    b.HasData(
                        new
                        {
                            Id = new Guid("84d0826e-ce9c-4a52-b27e-e7740e8f98e7"),
                            Name = "Primary Background"
                        },
                        new
                        {
                            Id = new Guid("db0d60a6-e693-44eb-ae68-cc31719599ae"),
                            Name = "Primary Letter"
                        },
                        new
                        {
                            Id = new Guid("7e3db5bd-c255-4795-8d3b-3f038f09a9ba"),
                            Name = "Title"
                        },
                        new
                        {
                            Id = new Guid("9659ad69-c5d3-4939-8702-af2064d6f1fd"),
                            Name = "Title Date"
                        },
                        new
                        {
                            Id = new Guid("457978c7-36f9-4ce0-b511-c5146c80c22e"),
                            Name = "Title Date Background"
                        });
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsMale")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("LeadId")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.HasIndex("LeadId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Card", b =>
                {
                    b.HasOne("Daily.Planner.with.God.Domain.Entities.Agenda", "Agenda")
                        .WithMany("Cards")
                        .HasForeignKey("AgendaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.ColorPalett", "LetterColor")
                        .WithMany("CardsLetter")
                        .HasForeignKey("LetterColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.ColorPalett", "LetterDateColor")
                        .WithMany("CardsLetterDate")
                        .HasForeignKey("LetterDateColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.User", "OriginalUser")
                        .WithMany()
                        .HasForeignKey("OriginalUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.ColorPalett", "PrimaryColorDate")
                        .WithMany("CardsPrimaryDate")
                        .HasForeignKey("PrimaryColorDateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.ColorPalett", "PrimaryColor")
                        .WithMany("CardsPrimary")
                        .HasForeignKey("PrimaryColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.ColorPalett", "TitleColor")
                        .WithMany("CardsTitle")
                        .HasForeignKey("TitleColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.User", "User")
                        .WithMany("Cards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agenda");

                    b.Navigation("LetterColor");

                    b.Navigation("LetterDateColor");

                    b.Navigation("OriginalUser");

                    b.Navigation("PrimaryColor");

                    b.Navigation("PrimaryColorDate");

                    b.Navigation("TitleColor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Ads", b =>
                {
                    b.HasOne("Daily.Planner.with.God.Domain.Entities.User", "UserCreated")
                        .WithMany("Ads")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Agenda", b =>
                {
                    b.HasOne("Daily.Planner.with.God.Domain.Entities.Agenda", "OriginalAgenda")
                        .WithMany()
                        .HasForeignKey("OriginalAgendaId");

                    b.Navigation("OriginalAgenda");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.ColorPalett", b =>
                {
                    b.HasOne("Daily.Planner.with.God.Domain.Entities.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Permission", b =>
                {
                    b.HasOne("Daily.Planner.with.God.Domain.Entities.Role", "Rol")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Petition", b =>
                {
                    b.HasOne("Daily.Planner.with.God.Domain.Entities.PetitionType", "PetitionType")
                        .WithMany()
                        .HasForeignKey("PetitionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.User", "ReportedToUser")
                        .WithMany()
                        .HasForeignKey("ReportedToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PetitionType");

                    b.Navigation("ReportedToUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.User", b =>
                {
                    b.HasOne("Daily.Planner.with.God.Domain.Entities.Configuration", "Configuration")
                        .WithMany()
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.User", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId");

                    b.HasOne("Daily.Planner.with.God.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Configuration");

                    b.Navigation("Lead");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Agenda", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.ColorPalett", b =>
                {
                    b.Navigation("CardsLetter");

                    b.Navigation("CardsLetterDate");

                    b.Navigation("CardsPrimary");

                    b.Navigation("CardsPrimaryDate");

                    b.Navigation("CardsTitle");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Daily.Planner.with.God.Domain.Entities.User", b =>
                {
                    b.Navigation("Ads");

                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
